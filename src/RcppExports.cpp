// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_is_valid_lipid_name
bool rcpp_is_valid_lipid_name(std::string lipid_name);
RcppExport SEXP _rgoslin_rcpp_is_valid_lipid_name(SEXP lipid_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type lipid_name(lipid_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_is_valid_lipid_name(lipid_name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_parse_lipid_name
SEXP rcpp_parse_lipid_name(std::string lipid_name);
RcppExport SEXP _rgoslin_rcpp_parse_lipid_name(SEXP lipid_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type lipid_name(lipid_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_parse_lipid_name(lipid_name));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rgoslin_rcpp_is_valid_lipid_name", (DL_FUNC) &_rgoslin_rcpp_is_valid_lipid_name, 1},
    {"_rgoslin_rcpp_parse_lipid_name", (DL_FUNC) &_rgoslin_rcpp_parse_lipid_name, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rgoslin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
